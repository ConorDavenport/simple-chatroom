{"version":3,"sources":["components/Room.js","components/JoinRoom.js","components/Home.js","components/Feed.js","components/App.js","serviceWorker.js","index.js"],"names":["client","JoinRoom","type","id","autoComplete","required","changeName","this","props","React","Component","Submit","history","useHistory","onClick","document","getElementById","value","push","Room","axios","require","Message","data","user","message","date","_id","Feed","state","messages","onmessage","JSON","parse","newStateArray","slice","unshift","setState","console","log","leastRecentId","length","get","params","leastRecent","then","res","catch","err","m","i","key","className","renderFeed","loadMore","handleClick","bind","W3CWebSocket","onopen","send","stringify","name","App","n","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.646d0d19.chunk.js","sourcesContent":["import React from 'react'\r\nimport { w3cwebsocket as W3CWebSocket } from 'websocket'\r\nimport Feed from './Feed'\r\n\r\nvar client\r\n   \r\nexport default class Room extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.handleClick = this.handleClick.bind(this)\r\n    client = new W3CWebSocket('ws://localhost:8000')\r\n    client.onopen = () => {\r\n      console.log('WebSocket Connected')\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    var message = document.getElementById('message').value\r\n    client.send(JSON.stringify({\r\n      message: message,\r\n      user: this.props.name\r\n    }))\r\n    document.getElementById('message').value = ''\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{`Hello ${this.props.name}`}</div>\r\n        <input type='text' id='message' autoComplete='off'/>\r\n        <button onClick={this.handleClick}>Submit</button>\r\n        <Feed client={client}/>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default class JoinRoom extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <label>{'Name: '}</label>\r\n          <input type=\"text\" id=\"userName\" autoComplete=\"off\" required/>\r\n        </div>\r\n        <div>\r\n          <Submit \r\n            changeName={this.props.changeName}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst Submit = (props) => {\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    props.changeName(document.getElementById('userName').value)\r\n    history.push('/chat-room')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick}>{'Join'}</button>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport JoinRoom from './JoinRoom'\r\n\r\nexport default class Room extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id='home'>\r\n        <JoinRoom \r\n          changeName={this.props.changeName}/>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport './App.css';\r\nconst axios = require('axios')\r\n\r\nclass Message extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.props.data.user}</div>\r\n        <div>{this.props.data.message}</div>\r\n        <div>{this.props.data.date}</div>\r\n        <div>{this.props.data._id}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default class Feed extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      messages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.loadMore()\r\n\r\n    this.props.client.onmessage = (message) => {\r\n      var data = JSON.parse(message.data)\r\n      // slice = shallow copy\r\n      let newStateArray = this.state.messages.slice()\r\n      newStateArray.unshift(data)\r\n      this.setState({ messages: newStateArray })\r\n      console.log(this.state.messages)\r\n    }\r\n  }\r\n\r\n  loadMore() {\r\n    let leastRecentId\r\n    try {\r\n      leastRecentId = this.state.messages[this.state.messages.length - 1]._id\r\n    } catch {\r\n      leastRecentId = 0\r\n    }\r\n    axios.get('http://localhost:8000/rooms/messages',\r\n    { params: { leastRecent: leastRecentId }})\r\n    .then((res) => {\r\n      let newStateArray = this.state.messages.slice()\r\n      newStateArray.push(res.data)\r\n      this.setState({ messages: newStateArray })\r\n      console.log(this.state.messages)\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  renderFeed() {\r\n    const m = []\r\n    for (let i = 0; i < this.state.messages.length; i++) {\r\n      m.push(<div key={i} className='message'>\r\n          <Message data={this.state.messages[i]} />\r\n        </div>)\r\n    }\r\n    return m\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id='feed'>\r\n          {this.renderFeed()}\r\n        </div>\r\n        <button onClick={() => this.loadMore()}>More</button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport './App.css';\nimport Home from './Home'\nimport Room from './Room'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: 'User',\n    }\n    this.changeName = this.changeName.bind(this)\n  }\n\n  changeName(n) {\n    this.setState({ name: n })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route \n              exact path='/'\n              render={(props) => (\n                <Home {...props} \n                  changeName={this.changeName} />\n              )} />\n            <Route \n              exact path='/chat-room'\n              render={(props) => (\n                <Room {...props} \n                  name={this.state.name} />\n              )} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}